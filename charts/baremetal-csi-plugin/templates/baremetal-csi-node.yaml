{{- if eq .Values.deploy.node true }}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: baremetal-csi-node
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: baremetal-csi-node
  template:
    metadata:
      labels:
        app: baremetal-csi-node
    spec:
      hostIPC: True
      serviceAccountName: csi-node-sa
      containers:
      # ********************** DRIVER-REGISTRAR sidecar container definition **********************
      - name: csi-node-driver-registrar
        {{- if .Values.env.test  }}
        image: csi-node-driver-registrar:{{ .Values.nodeDriverRegistrar.image.tag }}
        {{- else }}
        image: {{ .Values.global.registry }}/csi-node-driver-registrar:{{ .Values.nodeDriverRegistrar.image.tag }}
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
          - "--v=5"
          - "--csi-address=$(ADDRESS)"
          - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "rm -rf /registration/baremetal-csi /registration/baremetal-csi-reg.sock"]
        env:
          - name: ADDRESS
            value: /csi/csi.sock
          - name: DRIVER_REG_SOCK_PATH
            value: /var/lib/kubelet/plugins/baremetal-csi/csi.sock
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
        volumeMounts:
          - name: csi-socket-dir
            mountPath: /csi
          - name: registration-dir
            mountPath: /registration
      # ********************** baremetal-csi-node container definition **********************
      - name: node
        {{- if .Values.env.test  }}
        image: baremetal-csi-plugin-node:{{ default .Values.image.tag .Values.node.image.tag }}
        {{- else }}
        image: {{ .Values.global.registry }}/baremetal-csi-plugin-node:{{ default .Values.image.tag .Values.node.image.tag }}
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        args:
          - "--csiendpoint=$(CSI_ENDPOINT)"
          - "--nodeid=$(KUBE_NODE_NAME)"
          - "--volumemgrip=$(MY_POD_IP)"
          - "--namespace=$(NAMESPACE)"
          {{- if .Values.logReceiver.create  }}
          - "--logpath=/var/log/csi.log"
          {{- end }}
          {{- if .Values.node.grpc.client.hwmgr.endpoint }}
          - --hwmgrendpoint={{ .Values.node.grpc.client.hwmgr.endpoint }}
        {{- end }}
        ports:
          - containerPort: {{ .Values.node.grpc.server.port }}
        readinessProbe:
          exec:
            # have to use bash for extrapolating env var
            command:
              - "bash"
              - "-c"
              - |
                /health_probe -addr=$MY_POD_IP:{{ .Values.node.grpc.server.port }}
          initialDelaySeconds: 3
          periodSeconds: 3
          successThreshold: 3
          failureThreshold: 100
        env:
          - name: CSI_ENDPOINT
            value: unix:///csi/csi.sock
          - name: LOG_FORMAT
            value: {{ .Values.log.format }}
          - name: KUBE_NODE_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: spec.nodeName
          - name: MY_POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
        securityContext:
          privileged: true
        volumeMounts:
        - name: logs
          mountPath: /var/log
        - name: host-dev
          mountPath: /dev
        - name: host-sys
          mountPath: /sys
        - name: host-run-udev
          mountPath: /run/udev
        - name: csi-socket-dir
          mountPath: /csi
        - name: mountpoint-dir
          mountPath: /var/lib/kubelet/pods
          mountPropagation: "Bidirectional"
        ports:
        {{- if .Values.hwmgr.grpc.server.port }}
          - containerPort: {{ .Values.node.grpc.server.port }}
        {{- end }}
      # ********************** baremetal-csi-hwmgr container definition **********************
      # TODO: FABRIC-8595 Replace HWManager to DaemonSet
      - name: hwmgr
        {{- if .Values.env.test  }}
        image: {{ .Values.hwmgr.image.repository }}:{{ default .Values.image.tag .Values.hwmgr.image.tag }}
        {{- else }}
        image: {{ .Values.global.registry }}/{{ .Values.hwmgr.image.repository }}:{{ default .Values.image.tag .Values.hwmgr.image.tag }}
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        # if halOverride true it means we need to use CM, but e2e doesn't support CM, use iscsi_entrypoint
    {{- if eq .Values.hwmgr.halOverride.iscsi true }}
        command: ["/iscsi_entrypoint.sh"]
    {{- else}}
      {{- if .Values.hwmgr.grpc.server.endpoint }}
        args:
          - --hwmgrendpoint={{ .Values.hwmgr.grpc.server.endpoint }}
        {{- if .Values.logReceiver.create  }}
          - --logpath=/var/log/hwmgr.log
        {{- end }}
      {{- end }}
    {{- end}}
        securityContext:
          privileged: true
        env:
        - name: LOG_FORMAT
          value: {{ .Values.log.format }}
        - name: HW_MANAGER
          value: {{ .Values.hwmgr.type }}
        - name: KUBE_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        ports:
        {{- if .Values.hwmgr.grpc.server.port }}
          - containerPort: {{ .Values.hwmgr.grpc.server.port }}
        {{- end }}
        volumeMounts:
        - name: host-dev
          mountPath: /dev
        {{- if eq .Values.hwmgr.deployConfig true }}
        - name: drive-config
          mountPath: /etc/config
        {{- end }}
        {{- if .Values.logReceiver.create  }}
        - name: logs
          mountPath: /var/log/
        {{- end }}
      {{- if .Values.logReceiver.create  }}
      - name: fluentbit-agent
        image: {{ .Values.global.registry }}/{{ .Values.fluentbitAgent.image.repository }}:{{ default .Values.tag .Values.fluentbitAgent.image.tag }}
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - name: logs-config
            mountPath: /fluent-bit/etc
          - name: logs
            mountPath: /var/log/
      {{- end }}
      volumes:
      {{- if .Values.logReceiver.create }}
      - name: logs-config
        configMap:
          name: {{ .Release.Name }}-logs-config
      {{- end }}
      - name: logs
        emptyDir: {}
      - name: host-dev
        hostPath:
          path: /dev
          type: Directory
      - name: host-sys
        hostPath:
          path: /sys
          type: Directory
      - name: host-run-udev
        hostPath:
          path: /run/udev
          type: Directory
      - name: csi-socket-dir
        hostPath:
          path: /var/lib/kubelet/plugins/baremetal-csi
          type: DirectoryOrCreate
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
      # This volume is where the driver mounts volumes
      - name: mountpoint-dir
        hostPath:
          path: /var/lib/kubelet/pods
          type: Directory
      {{- if eq .Values.hwmgr.deployConfig true }}
      - name: drive-config
        configMap:
          name: loopback-config
      {{- end }}
{{- end }}
