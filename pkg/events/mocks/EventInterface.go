// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	fields "k8s.io/apimachinery/pkg/fields"

	mock "github.com/stretchr/testify/mock"

	runtime "k8s.io/apimachinery/pkg/runtime"

	types "k8s.io/apimachinery/pkg/types"

	v1 "k8s.io/api/core/v1"

	watch "k8s.io/apimachinery/pkg/watch"
)

// EventInterface is an autogenerated mock type for the EventInterface type
type EventInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *EventInterface) Create(_a0 *v1.Event) (*v1.Event, error) {
	ret := _m.Called(_a0)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWithEventNamespace provides a mock function with given fields: event
func (_m *EventInterface) CreateWithEventNamespace(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name, options
func (_m *EventInterface) Delete(name string, options *metav1.DeleteOptions) error {
	ret := _m.Called(name, options)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *metav1.DeleteOptions) error); ok {
		r0 = rf(name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCollection provides a mock function with given fields: options, listOptions
func (_m *EventInterface) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	ret := _m.Called(options, listOptions)

	var r0 error
	if rf, ok := ret.Get(0).(func(*metav1.DeleteOptions, metav1.ListOptions) error); ok {
		r0 = rf(options, listOptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name, options
func (_m *EventInterface) Get(name string, options metav1.GetOptions) (*v1.Event, error) {
	ret := _m.Called(name, options)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(string, metav1.GetOptions) *v1.Event); ok {
		r0 = rf(name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, metav1.GetOptions) error); ok {
		r1 = rf(name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFieldSelector provides a mock function with given fields: involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID
func (_m *EventInterface) GetFieldSelector(involvedObjectName *string, involvedObjectNamespace *string, involvedObjectKind *string, involvedObjectUID *string) fields.Selector {
	ret := _m.Called(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)

	var r0 fields.Selector
	if rf, ok := ret.Get(0).(func(*string, *string, *string, *string) fields.Selector); ok {
		r0 = rf(involvedObjectName, involvedObjectNamespace, involvedObjectKind, involvedObjectUID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fields.Selector)
		}
	}

	return r0
}

// List provides a mock function with given fields: opts
func (_m *EventInterface) List(opts metav1.ListOptions) (*v1.EventList, error) {
	ret := _m.Called(opts)

	var r0 *v1.EventList
	if rf, ok := ret.Get(0).(func(metav1.ListOptions) *v1.EventList); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.EventList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metav1.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: name, pt, data, subresources
func (_m *EventInterface) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (*v1.Event, error) {
	_va := make([]interface{}, len(subresources))
	for _i := range subresources {
		_va[_i] = subresources[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name, pt, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(string, types.PatchType, []byte, ...string) *v1.Event); ok {
		r0 = rf(name, pt, data, subresources...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, types.PatchType, []byte, ...string) error); ok {
		r1 = rf(name, pt, data, subresources...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PatchWithEventNamespace provides a mock function with given fields: event, data
func (_m *EventInterface) PatchWithEventNamespace(event *v1.Event, data []byte) (*v1.Event, error) {
	ret := _m.Called(event, data)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event, []byte) *v1.Event); ok {
		r0 = rf(event, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event, []byte) error); ok {
		r1 = rf(event, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: scheme, objOrRef
func (_m *EventInterface) Search(scheme *runtime.Scheme, objOrRef runtime.Object) (*v1.EventList, error) {
	ret := _m.Called(scheme, objOrRef)

	var r0 *v1.EventList
	if rf, ok := ret.Get(0).(func(*runtime.Scheme, runtime.Object) *v1.EventList); ok {
		r0 = rf(scheme, objOrRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.EventList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*runtime.Scheme, runtime.Object) error); ok {
		r1 = rf(scheme, objOrRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: _a0
func (_m *EventInterface) Update(_a0 *v1.Event) (*v1.Event, error) {
	ret := _m.Called(_a0)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWithEventNamespace provides a mock function with given fields: event
func (_m *EventInterface) UpdateWithEventNamespace(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Watch provides a mock function with given fields: opts
func (_m *EventInterface) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	ret := _m.Called(opts)

	var r0 watch.Interface
	if rf, ok := ret.Get(0).(func(metav1.ListOptions) watch.Interface); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(watch.Interface)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(metav1.ListOptions) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
