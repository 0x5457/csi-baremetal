// Code generated by mockery v2.0.0-alpha.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	v1 "k8s.io/api/core/v1"
)

// EventSink is an autogenerated mock type for the EventSink type
type EventSink struct {
	mock.Mock
}

// Create provides a mock function with given fields: event
func (_m *EventSink) Create(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Patch provides a mock function with given fields: oldEvent, data
func (_m *EventSink) Patch(oldEvent *v1.Event, data []byte) (*v1.Event, error) {
	ret := _m.Called(oldEvent, data)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event, []byte) *v1.Event); ok {
		r0 = rf(oldEvent, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event, []byte) error); ok {
		r1 = rf(oldEvent, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: event
func (_m *EventSink) Update(event *v1.Event) (*v1.Event, error) {
	ret := _m.Called(event)

	var r0 *v1.Event
	if rf, ok := ret.Get(0).(func(*v1.Event) *v1.Event); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Event)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Event) error); ok {
		r1 = rf(event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
